<?xml version="1.0"?>
<opt:optionLanguage
    xmlns:opt="http://crownking/opt"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://crownking/opt opt/optionLanguage.xsd"
    opt:id="clang++"
    opt:name="Clang C++ Compiler">

  <opt:optionCategory opt:id="cpp" opt:name="C++ specific">
    <opt:booleanOption 
    	opt:name="Generate run time type descriptor information"
        opt:trueemission="-frtti"
        opt:falseemission="-fno-rtti"
        opt:booldefault="true"
    	opt:id="rtti"/>
    <opt:booleanOption
        opt:name="Enable C++ exception handling"
        opt:trueemission="-fexceptions"
    	opt:falseemission="-fno-exceptions"
    	opt:booldefault="true"
    	opt:id="exceptions"/>
    <opt:booleanOption
        opt:name="Enable C++20 Modules"
        opt:trueemission="-fmodules"
        opt:booldefault="false"
        opt:id="cxx_modules">
        <opt:xhtml>
            Enable using C++20 modules in C++ code.  This feature is not yet complete and so you will
            probably need to provide other options in the Additional Options field.  
            See the Clang documentation on modules for more information and other options that may 
            be needed to get modules working.
        </opt:xhtml>
    </opt:booleanOption>
  </opt:optionCategory>

  <opt:optionCategory opt:id="general" opt:name="General">
    <opt:enumOption
        opt:id="cxx-standard"
        opt:name="Language standard"
        opt:textdefault=""
        opt:emitswhendefault="false"
        opt:emissionprefix="-std=">
        <opt:selection opt:text="" opt:name="Compiler Default"/>
        <opt:selection opt:text="c++98" opt:name="C++98"/>
        <opt:selection opt:text="gnu++98" opt:name="GNU++98"/>
        <opt:selection opt:text="c++11" opt:name="C++11"/>
        <opt:selection opt:text="gnu++11" opt:name="GNU++11"/>
        <opt:selection opt:text="c++14" opt:name="C++14"/>
        <opt:selection opt:text="gnu++14" opt:name="GNU++14"/>
        <opt:selection opt:text="c++17" opt:name="C++17"/>
        <opt:selection opt:text="gnu++17" opt:name="GNU++17"/>
        <opt:selection opt:text="c++20" opt:name="C++20"/>
        <opt:selection opt:text="gnu++20" opt:name="GNU++20"/>
        <opt:xhtml>
            Set the desired C++ language standard, with the GNU versions containing GCC-compatible 
            extensions.  The default depends on the version of Clang, but is GNU++14 as of Clang 6.
        </opt:xhtml>
    </opt:enumOption>
    <opt:enumOption 
    	opt:id="unaligned-access"
    	opt:name="Enable unaligned access"
    	opt:textdefault=""
    	opt:unsuppressif="${target.isARM}"
    	opt:showif="${target.isARM}">
        <opt:selection opt:text="" opt:name="Compiler Default"/>
        <opt:selection opt:text="-munaligned-access" opt:name="Unaligned Access"/>
        <opt:selection opt:text="-mno-unaligned-access" opt:name="No Unaligned Access"/>
        <opt:xhtml> 
            Enables (or disables) reading and writing of 16- and 32- bit values from addresses that are 
            not 16- or 32- bit aligned. By default, unaligned access is disabled for all pre-ARMv6 and 
            all ARMv6-M architectures, and enabled for all other architectures.  If unaligned access is 
            not enabled then words in packed data structures are accessed a byte at a time.
        </opt:xhtml>
    </opt:enumOption>
    <opt:booleanOption 
    	opt:id="enable-symbols"
    	opt:groupid="symbols-on-release"
    	opt:name="Have symbols in production build"
    	opt:trueemission="-g"
    	opt:falseemission=""
    	opt:booldefault="true"/>
    <!-- TODO:  We may not be able to support AppIO. -->
    <opt:booleanOption
    	opt:id="enable-app-io"
    	opt:name="Enable App IO"
    	opt:trueemission="-mappio-debug"
    	opt:suppressif="${target.isARM}"/>
    <opt:booleanOption
    	opt:id="isolate-each-function"
    	opt:name="Isolate each function in a section"
    	opt:trueemission="-ffunction-sections"/>
    <opt:booleanOption
    	opt:id="place-data-into-section"
    	opt:name="Place data into its own section"
    	opt:trueemission="-fdata-sections"/>
    <opt:booleanOption
    	opt:id="use-indirect-calls"
    	opt:name="Use indirect calls"
    	opt:trueemission="-mlong-calls"/>
    <opt:booleanOption
    	opt:id="generate-16-bit-code"
    	opt:name="Generate MIPS16 16-bit code"
    	opt:trueemission="-mips16"
    	opt:default="false"
		opt:suppressif="${mips16.suppress}"/>
    <opt:booleanOption
    	opt:id="generate-micro-compressed-code"
    	opt:name="Generate microMIPS compressed code"
    	opt:default="false"
    	opt:trueemission="-mmicromips"
		opt:suppressif="${micromips.suppress}"/>
    <opt:booleanOption
    	opt:id="generate-thumb-code"
    	opt:name="Generate Thumb code"
    	opt:default="false"
    	opt:trueemission="-mthumb"
		opt:suppressif="${thumb.suppress}"/>
  </opt:optionCategory>

  <opt:optionCategory opt:id="optimization" opt:name="Optimization">
    <opt:enumOption
    	opt:id="optimization-level"
        opt:name="Optimization level"
        opt:textdefault=""
    	opt:emissionprefix=""
    	opt:emitswhendefault="false">
        <opt:selection opt:text="" opt:name="0"/>
        <opt:selection opt:text="-Og" opt:name="g"/>
        <opt:selection opt:text="-O1" opt:name="1"/>
        <opt:selection opt:text="-O2" opt:name="2"/>
        <opt:selection opt:text="-O3" opt:name="3"/>
        <opt:selection opt:text="-Ofast" opt:name="fast"/>
        <opt:selection opt:text="-Os" opt:name="s"/>
        <opt:selection opt:text="-Oz" opt:name="z"/>
        <opt:xhtml>
            Higher levels of optimization take longer and use more memory, especially for larger functions.
            <br/>- 0 - Do not optimize.  This compiles the fastest and generates the most debuggable code.
            <br/>- g - Currently the same as O1, but may be used to optimize for debuggability in the future (like GCC).
            <br/>- 1 - Perform basic optimizations, reducing both code size and execution time.
            <br/>- 2 - Perform nearly all supported optimizations that do not involve a space-speed trade-off.
            <br/>- 3 - Like 02, but enables optimizations that may generate larger code.
            <br/>- fast - Like 03, but allows optimizations that may not strictly comply with language standards.
            <br/>- s - Like 02, but enables optimizations to reduce code size.
            <br/>- z - Like 0s, but tries to reduce size even further.
        </opt:xhtml>
    </opt:enumOption>
    <opt:booleanOption
    	opt:id="enable-unroll-loops"
    	opt:name="Unroll loops"
    	opt:trueemission="-funroll-loops"/>
    <opt:booleanOption
    	opt:id="enable-omit-frame-pointer"
    	opt:name="Omit frame pointer"
    	opt:trueemission="-fomit-frame-pointer"/>
  </opt:optionCategory>

  <opt:optionCategory opt:id="errors-and-warnings" opt:name="Preprocessing and messages">
    <opt:stringListOption
    	opt:id="preprocessor-macros"
    	opt:name="Preprocessor macros"
    	opt:emissionprefix="-D"
    	opt:emissionseparator=" -D"
    	opt:expr="[A-Za-z_][A-Za-z_0-9]*(=.+)?"/>
    <opt:stringListOption
    	opt:id="extra-include-directories"
        opt:groupid="include-dirs"
    	opt:name="Include directories"
    	opt:emissionprefix="-I"
    	opt:emissionseparator=" -I"
    	opt:slashnormalization="unix"
    	opt:isdirectory="true"
    	opt:isbrowsable="true">
        <opt:browseinfo>
            Relative paths are from <br/>MPLAB X project directory.
        </opt:browseinfo>
        <opt:xhtml>
            <br/>Relative paths are from MPLAB X project directory.
            <br/>If you want a single place to have include paths for compilers and assembler, use
            the include paths in the global options node.
        </opt:xhtml>
    </opt:stringListOption>
    <opt:booleanOption
    	opt:id="c-includes-in-cpp"
    	opt:name="Also use C include directories"
    	opt:trueemission="">
        <opt:xhtml>
            If enabled, add the directories listed in the "Include Directories" option in the C
            option section in addition to the directories in the C++ option section.  The C 
            directories will be placed on the compiler command line directly before the C++ ones.
        </opt:xhtml>
    </opt:booleanOption>
    <opt:booleanOption
    	opt:id="make-warnings-into-errors"
    	opt:name="Make warnings into errors"
    	opt:trueemission="-Werror"/>
    <opt:booleanOption
        opt:id="additional-warnings"
    	opt:name="Additional warnings"
    	opt:trueemission="-Wall"/>
    <opt:booleanOption
    	opt:id="strict-ansi"
    	opt:name=""
    	opt:trueemission="-pedantic"/>
  </opt:optionCategory>


  <opt:enablePattern  opt:idref="rtti"       opt:expr="-frtti"/>
  <opt:disablePattern opt:idref="rtti"       opt:expr="-fno-rtti"/>
  <opt:enablePattern  opt:idref="exceptions" opt:expr="-fexceptions"/>
  <opt:disablePattern opt:idref="exceptions" opt:expr="-fno-exceptions"/>
  <opt:enablePattern  opt:idref="check-new"  opt:expr="-fcheck-new"/>
  <opt:disablePattern opt:idref="check-new"  opt:expr="-fno-check-new"/>
  <opt:enablePattern  opt:idref="eh-specs"   opt:expr="-fenforce-eh-specs"/>
  <opt:disablePattern opt:idref="eh-specs"   opt:expr="-fno-enforce-eh-specs"/>

  <opt:enablePattern opt:idref="enable-symbols" opt:expr="-g"/>
  <opt:enablePattern opt:idref="isolate-each-function" opt:expr="-ffunction-sections"/>
  <opt:enablePattern opt:idref="place-data-into-section" opt:expr="-fdata-sections"/>
  <opt:enablePattern opt:idref="use-indirect-calls" opt:expr="-mlong-calls"/>
  <opt:enablePattern opt:idref="generate-16-bit-code" opt:expr="-mips16"/>
  <opt:enablePattern opt:idref="generate-micro-compressed-code" opt:expr="-mmicromips"/>
  <opt:enablePattern opt:idref="generate-thumb-code" opt:expr="-mthumb"/>
  <opt:submatchPattern opt:idref="preprocessor-macros" opt:expr="-D(.+)"/>
  <opt:submatchPattern opt:idref="extra-include-directories" opt:expr="-I(.+)"/>

  <opt:submatchPattern opt:idref="optimization-level" opt:expr="(-O[123s])"/>
  <opt:enablePattern opt:idref="enable-unroll-loops" opt:expr="-funroll-loops"/>
  <opt:enablePattern opt:idref="enable-omit-frame-pointer" opt:expr="-fomit-frame-pointer"/>
  <opt:submatchPattern opt:idref="unaligned-access" opt:expr="-munaligned-access"/>
  <opt:submatchPattern opt:idref="unaligned-access" opt:expr="-mno-unaligned-access"/>

  <opt:enablePattern opt:idref="make-warnings-into-errors" opt:expr="-Werror"/>
  <opt:enablePattern opt:idref="additional-warnings" opt:expr="-Wall"/>
  <opt:enablePattern opt:idref="strict-ansi" opt:expr="-pedantic"/>

</opt:optionLanguage>
